version: '3.8'

services:
  # Global Redis service for caching, message queuing, etc.
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - metabundle-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Celery worker for background task processing
  celery-worker:
    build:
      context: ./services/celery
    volumes:
      - ./services/celery:/app
      - ${SHARED_TASKS}:/app/shared-tasks
      - ./projects/Scraper:/app/projects/Scraper
    working_dir: /app
    command: >
      python worker.py worker --loglevel=info
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - metabundle-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: ./services/celery
    volumes:
      - ./services/celery:/app
      - ${SHARED_TASKS}:/app/shared-tasks
      - ./projects/Scraper:/app/projects/Scraper
    working_dir: /app
    command: >
      python worker.py beat --loglevel=info
    depends_on:
      - redis
      - celery-worker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
    networks:
      - metabundle-network
    restart: unless-stopped

  # Flower for monitoring Celery
  flower:
    image: mher/flower:0.9.7
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
    depends_on:
      - redis
      - celery-worker
    networks:
      - metabundle-network
    restart: unless-stopped

networks:
  metabundle-network:
    driver: bridge

volumes:
  redis-data:
